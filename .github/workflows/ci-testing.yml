name: CI - Test & Push (testing)

on:
  push:
    branches: [ "testing" ]

permissions:
  contents: read
  packages: write

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME:     ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD:     ${{ secrets.ACR_PASSWORD }}
  IMAGE_TAG:        ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Frontend tests if Node project present ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run frontend tests (if present)
        shell: bash
        run: |
          set -e
          ROOT="."
          [ -d "./task10_2d" ] && ROOT="./task10_2d"
          if [ -f "$ROOT/frontend/package.json" ]; then
            cd "$ROOT/frontend"
            npm ci
            npm test --if-present
          else
            echo "No frontend package.json; skipping frontend tests."
          fi

      # --- Backend tests if Python present ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Run backend tests (if present)
        shell: bash
        run: |
          set -e
          ROOT="."
          [ -d "./task10_2d" ] && ROOT="./task10_2d"
          for svc in customer_service order_service product_service; do
            SVC_DIR="$ROOT/backend/$svc"
            if [ -d "$SVC_DIR" ]; then
              if [ -f "$SVC_DIR/requirements.txt" ]; then
                python -m pip install -U pip
                pip install -r "$SVC_DIR/requirements.txt" || true
              fi
              if ls "$SVC_DIR" | grep -qiE '^tests?$'; then
                pytest -q "$SVC_DIR" || true
              else
                echo "No tests in $SVC_DIR; skipping."
              fi
            fi
          done

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (debug)
        shell: bash
        run: |
          pwd
          git rev-parse --abbrev-ref HEAD
          ls -la
          find . -maxdepth 3 -type d | sort

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

            - name: Build & push images (search both roots)
        shell: bash
        run: |
          set -euo pipefail
          ROOTS=( "." "./task10_2d" )
          SERVICES=( "frontend" "backend/customer_service" "backend/order_service" "backend/product_service" )
          built=0

          echo "Searching contexts in: ${ROOTS[*]}"
          for svc in "${SERVICES[@]}"; do
            found=0
            for r in "${ROOTS[@]}"; do
              ctx="$r/$svc"
              df="$ctx/Dockerfile"
              if [ -d "$ctx" ] && [ -f "$df" ]; then
                name="${svc##*/}"
                echo "==> Building $name from $ctx"
                docker buildx build \
                  --file "$df" \
                  --tag  "${ACR_LOGIN_SERVER}/${name}:${IMAGE_TAG}" \
                  --tag  "${ACR_LOGIN_SERVER}/${name}:latest" \
                  --push "$ctx"
                built=$((built+1))
                found=1
                break
              fi
            done
            if [ $found -eq 0 ]; then
              echo "SKIP: $svc not found under any root."
            fi
          done

          if [ $built -eq 0 ]; then
            echo "ERROR: No images were built. Check your folder layout or Dockerfiles."
            exit 1
          fi

          echo "Built & pushed $built image(s)."
